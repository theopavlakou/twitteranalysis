%C_blanket = blanket_intersection_vectors(k, C, Vtemp)
%--------------------------------------------------------------------------
%Generates the intersection vectors that correspond to a k-blanket. 
%
%Version 1.0
%Date: 21/06/2013
%
%Input:
%   k: levels of sparsity for each PC, e.g. k = [5, 4, 3, 2, 5]
%   C: each column of this matrix is an intersection vector
%   Vtemp: nxd matrix
%Output: 
%   C_blanket: (d+1)xN matrix that contains all intersection vectors that
%   are generated by intersection of d curves. Each of these intersection
%   points lies below at least k-d-1 and at most k-1 other curves.
%--------------------------------------------------------------------------
function C_blanket = blanket_intersection_vectors(k, C, Vtemp)
d = size(Vtemp,2);
curves_above = 0;
C_blanket = zeros(size(C,1)+1,1);
eps = 10^-8; % epsilon pertrubation to avoid singularities
p = 1;
for i = 1:size(C,2) % for each of the intersection vectors
    % check the number of curves above it. Here Vtemp(C(end,i),:) is going
    % to pick the curve of Vtemp that is associated with the intersection
    % that corresponds to the intersetion vector C(1:end-1,i)
    c = C(1:end-1,i);
    curve = C(end,i);
    curves_above = sum(abs(Vtemp*c)>abs(Vtemp(curve,:)*c)+eps);
    % if there are more than k-d-1 and less than k-1 curves above the point
    % then it is a potential k-blanket point (all k-blanket points will be
    % in C_blanket
    if curves_above<=k-1 && curves_above>=k-d-1
        C_blanket(:,p) = [c ; curve ; abs(Vtemp(curve,:)*c)];
        p = p+1;
    end
end
